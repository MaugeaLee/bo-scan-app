import redis
import logging
import time
import sys
from API.CONFIG.bogger import BoggerDevLogger

class RedisClient:
    def __init__(self, host="localhost", port=6379, db=0, retries=3, retry_delay=2, logger:logging.Logger=None):
        self.logger = logger or BoggerDevLogger(self.__class__.__name__).logger
        self.host = host
        self.port = port
        self.db = db
        self.retries = retries
        self.retry_delay = retry_delay
        self.r_client = None


    def connect(self):
        attempt = 0
        # Ïó∞Í≤∞ ÌôïÏù∏Í≥º Ïû¨Ïó∞Í≤∞ Î∞òÎ≥µ
        while attempt < self.retries:
            try:
                self.r_client = redis.Redis(host=self.host, port=self.port, db=self.db, socket_connect_timeout=5)
                # pingÏúºÎ°ú redis server Ïó∞Í≤∞ Í∞ÄÎä• ÌôïÏù∏
                if self.r_client.ping():
                    self.logger.info("Redis ÏÑúÎ≤ÑÏùò PING Ïó∞Í≤∞ ÌôïÏù∏.")
                    break
                else:
                    self.logger.warning("Redis ÏÑúÎ≤ÑÏùò PING Ïó∞Í≤∞ Ïã§Ìå®.")
            except redis.exceptions.ConnectionError as connect_error:
                self.logger.error(f"‚ùå Redis Ïó∞Í≤∞ Ïã§Ìå® (ÏãúÎèÑ {attempt + 1}/{self.retries}) : {connect_error}")
            except Exception as e:
                self.logger.error(f"‚ö†Ô∏è ÏòàÍ∏∞Ïπò Î™ªÌïú Ïò§Î•ò : {e}")

            attempt += 1
            time.sleep(self.retry_delay)

        if self.r_client.ping():
            self.logger.info("üü¢ Redis Ï†ïÏÉÅ Ïó∞Í≤∞ ÌôïÏù∏.")
        else:
            # Î∞òÎ≥µ ÎÅùÏóê Ïó∞Í≤∞ Ïã§Ìå®
            self.logger.error(f"üö® Redis retry ÌöüÏàò Ï¥àÍ≥º. ÌîÑÎ°úÏÑ∏Ïä§Î•º Ï¢ÖÎ£å.")
            # ÌîÑÎ°úÏÑ∏Ïä§ Ï¢ÖÎ£å
            sys.exit(1)

    def disconnect(self):
        self.r_client.close()
        self.logger.info("Redis clientÍ∞Ä Ï†ïÏÉÅÏ†ÅÏúºÎ°ú Ï¢ÖÎ£åÎêòÏóàÏäµÎãàÎã§.")

if __name__ == "__main__":
    r = RedisClient()